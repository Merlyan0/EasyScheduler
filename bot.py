# –ø—Ä–æ—á–µ–µ
import threading
import time
from datetime import datetime
from pprint import pprint

# VK API
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType

# —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from data.scripts.db import DataBase

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
from data.scripts.handler import BotHandler

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
from config import *


# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å–∞–º API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
vk_session = vk_api.VkApi(token=TOKEN)
vk = vk_session.get_api()
longpoll = VkBotLongPoll(vk_session, GROUP_ID)

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = DataBase()

# —ç–∫–∑–µ–º–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥
handler = BotHandler(vk, db)


def every_minute():
    while datetime.now().second != 0:
        time.sleep(1)

    threading.Timer(60.0, every_minute).start()

    handler.send_reminders(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–æ—à–µ–¥—à–∏—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
every_minute()


# –≤—Å–µ –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–±—ã—Ç–∏—è
for event in longpoll.listen():

    # –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if event.type == VkBotEventType.MESSAGE_NEW:
        pprint(event.object)

        message = event.object.message["text"].lower()  # –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –∫–æ–º–∞–Ω–¥–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if message == '–≥–ª–∞–≤–Ω–∞—è' or message == 'üîô –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            handler.main_menu(event.object.message["peer_id"])

        elif message == '‚öô –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' or message == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
            handler.settings(event.object.message["peer_id"])

        elif message == 'üìù —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' or message == '—Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' or message == '—Å–æ–∑–¥–∞—Ç—å':
            handler.create_reminder(event.object.message["peer_id"])

        elif message == '–Ω–∞—á–∞—Ç—å':
            handler.start(event.object.message["peer_id"])

        else:
            # id –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            conv_mess_id = event.object.message["conversation_message_id"] - 1
            # –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            prev_mess = vk.messages.getByConversationMessageId(peer_id=event.object.message["peer_id"],
                                                               conversation_message_ids=conv_mess_id)

            if prev_mess['items'][0]['text'] == handler.get_message("MESS_CREATE_REMINDER"):
                handler.create_manually(event)

            elif prev_mess['items'][0]['text'] == handler.get_message("MESS_CREATE_REMINDER_COMPLETED_1"):
                handler.create_manually_step2(event)

            else:
                handler.reminder_analyzer(event)

    elif event.type == VkBotEventType.MESSAGE_EVENT:

        print(event.object)

        if event.object.payload.get("type") == "confirm":
            handler.confirm_info(event)
