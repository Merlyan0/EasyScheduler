# –ø—Ä–æ—á–µ–µ
import threading
import time
from datetime import datetime

# VK API
import vk_api
from vk_api.bot_longpoll import VkBotEventType

# —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from data.scripts.db import DataBase

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
from data.scripts.handler import BotHandler

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
from config import *

# –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LongPoll
from data.scripts.secureLongPoll import SecureVkBotLongPoll


# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å–∞–º API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
vk_session = vk_api.VkApi(token=TOKEN)
vk = vk_session.get_api()
longpoll = SecureVkBotLongPoll(vk_session, GROUP_ID)

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = DataBase()

# —ç–∫–∑–µ–º–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥
handler = BotHandler(vk, db)


def every_minute() -> None:
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.
    """
    while datetime.now().second != 0:
        time.sleep(1)

    threading.Timer(60.0, every_minute).start()

    handler.send_reminders(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

    if datetime.now().hour == 0 and datetime.now().minute == 0 and datetime.now().second == 0:
        handler.repeat_all()
        time.sleep(1)


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–æ—à–µ–¥—à–∏—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
every_minute()

# –≤—Å–µ –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–±—ã—Ç–∏—è
for event in longpoll.listen():

    # –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if event.type == VkBotEventType.MESSAGE_NEW:

        try:

            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            handler.check_user_db(event.object.message["from_id"])

            message = event.object.message["text"].lower()  # –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            peer_id = event.object.message["peer_id"]  # id –¥–∏–∞–ª–æ–≥–∞ –≤ –±–æ—Ç–µ
            attachments = event.object.message["attachments"]  # –≤–ª–æ–∂–µ–Ω–∏—è

            # –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Å—Ç–∏–∫–µ—Ä
            if message == '' and attachments != [] and 'sticker' in attachments[0]:
                handler.sticker_error(peer_id)

            # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            elif message == '' and attachments != [] and 'audio_message' in attachments[0]:
                audio = event.object.message["attachments"][0]['audio_message']['link_mp3']
                message = handler.audio_converter(peer_id, audio)

                # –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
                if message != '':
                    event.object.message["text"] = message
                    handler.reminder_analyzer(event)

            # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            elif message == '':
                handler.empty_error(peer_id)

            # –∫–æ–º–∞–Ω–¥–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            elif message == '–≥–ª–∞–≤–Ω–∞—è' or message == 'üîô –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                handler.main_menu(peer_id)

            # –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            elif message == '‚öô –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' or message == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
                handler.settings(peer_id)

            # –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
            elif message == '‚ùì –ø–æ–º–æ—â—å' or message == '–ø–æ–º–æ—â—å' or message == '–ø–æ–¥–¥–µ—Ä–∂–∫–∞':
                handler.support_step1(peer_id)

            # –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä—É—á–Ω–æ–µ –º–µ–Ω—é
            elif message == 'üìù —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º' or message == '—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º' or message == '—Ä—É—á–Ω–æ–π':
                handler.manual_mode(peer_id)

            # –∫–æ–º–∞–Ω–¥–∞ —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            elif message == 'üìù —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' or message == '—Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' or message == '—Å–æ–∑–¥–∞—Ç—å':
                handler.create_manually_step1(peer_id)

            # –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            elif message == 'üìÉ —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π' or message == '—Å–ø–∏—Å–æ–∫' or message == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
                handler.timetable(peer_id, datetime.now())

            # –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            elif message == '‚úÖ –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' or message == '–∑–∞–≤–µ—Ä—à–∏—Ç—å' or message == '–∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ':
                handler.finish_step1(peer_id)

            # –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞—Ç—å: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            elif message == '–Ω–∞—á–∞—Ç—å':
                handler.start(peer_id)

            # –∫–æ–º–∞–Ω–¥–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            elif message == '‚èè –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ' or message == '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ' or message == '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è':
                handler.drawing_tt(peer_id, vk.users.get(user_ids=event.object.message["from_id"])[0])

            else:

                try:
                    # id –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    conv_mess_id = event.object.message["conversation_message_id"] - 1

                    # –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    prev_mess = vk.messages.getByConversationMessageId(peer_id=peer_id,
                                                                       conversation_message_ids=conv_mess_id)
                    prev_mess = prev_mess['items'][0]['text']

                except (BaseException, ):
                    prev_mess = ''

                # —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
                if prev_mess == handler.get_message("MESS_SUPPORT_1"):
                    handler.support_step2(event)

                # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                elif prev_mess == handler.get_message("MESS_HOW_TO_REMOVE"):
                    handler.finish_step2(event)

                # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –Ω–∞–∑–≤–∞–Ω–∏–µ
                elif prev_mess == handler.get_message("MESS_CREATE_REMINDER"):
                    handler.create_manually_step2(event)

                # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –¥–∞—Ç–∞
                elif prev_mess == handler.get_message("MESS_CREATE_REMINDER_COMPLETED_1"):
                    handler.create_manually_step3(event)

                # –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                else:
                    handler.reminder_analyzer(event)

        except (BaseException, ) as e:
            try:
                print(e)
                handler.unknown_error(event.object.message["peer_id"])

            except (BaseException, ):
                print('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.')

    # –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤ inline –º–µ–Ω—é
    elif event.type == VkBotEventType.MESSAGE_EVENT:

        try:
            # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º
            if event.object.payload.get("type") == "set_finish":
                handler.set_finished(event.object, event.object.payload.get("id"))

            # –æ—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 5 –º–∏–Ω—É—Ç
            elif event.object.payload.get("type") == "set_delayed":
                handler.set_delayed(event.object, event.object.payload.get("id"))

        except (BaseException, ) as e:
            try:
                print(e)
                handler.unknown_error(event.object.message["peer_id"])

            except (BaseException, ):
                print('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.')
