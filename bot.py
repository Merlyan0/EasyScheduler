# –ø—Ä–æ—á–µ–µ
from datetime import datetime
from pprint import pprint

# VK API
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType

# –ø–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id

from DateParser_ru.parser import analyze_string

# —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from data.scripts.db import create_connection, add_to_db, set_date

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
from data.scripts.handler import BotHandler

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
from config import *


# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å–∞–º API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
vk_session = vk_api.VkApi(token=TOKEN)
vk = vk_session.get_api()
longpoll = VkBotLongPoll(vk_session, GROUP_ID)

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
__temp = create_connection()
db_conn = __temp[0]
db_cur = __temp[1]

# —ç–∫–∑–µ–º–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥
handler = BotHandler(vk)

# –≤—Å–µ –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–±—ã—Ç–∏—è
for event in longpoll.listen():

    # –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if event.type == VkBotEventType.MESSAGE_NEW:
        pprint(event.object)

        message = event.object.message["text"].lower()  # –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        if message == '–≥–ª–∞–≤–Ω–∞—è' or message == 'üîô –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            print(handler.get_message("MESS_CREATE_REMINDER"))
            handler.main_menu(event.object.message["peer_id"])

        elif message == '‚öô –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' or message == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
            handler.settings(event.object.message["peer_id"])

        elif message == 'üìù —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' or message == '—Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' or message == '—Å–æ–∑–¥–∞—Ç—å':
            handler.create_reminder(event.object.message["peer_id"])

        elif message == '–Ω–∞—á–∞—Ç—å':
            handler.start(event.object.message["peer_id"])

        else:
            # id –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            conv_mess_id = event.object.message["conversation_message_id"] - 1
            # –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            prev_mess = vk.messages.getByConversationMessageId(peer_id=event.object.message["peer_id"],
                                                               conversation_message_ids=conv_mess_id)

            if prev_mess['items'][0]['text'] == handler.get_message('MESS_CREATE_REMINDER'):
                add_to_db(db_conn, db_cur, title=event.object.message["text"], author=event.object.message["from_id"],
                          finished=False, created_date=datetime.now())

                vk.messages.send(peer_id=event.object.message["peer_id"],
                                 message=handler.get_message('MESS_CREATE_REMINDER_COMPLETED_1'),
                                 random_id=get_random_id())

            elif prev_mess['items'][0]['text'] == handler.get_message('MESS_CREATE_REMINDER_COMPLETED_1'):
                date = event.object.message["text"]
                if len(date.split()[0].split('.')) == 3:
                    a = datetime(year=int(date.split()[0].split('.')[2]), month=int(date.split()[0].split('.')[1]),
                                 day=int(date.split()[0].split('.')[1]))
                elif len(date.split()[0].split('.')) == 2:
                    a = datetime(year=datetime.now().year, month=int(date.split()[0].split('.')[1]),
                                 day=int(date.split()[0].split('.')[0]))
                else:
                    a = datetime(year=datetime.now().year, month=datetime.now().month,
                                 day=int(date.split()[0].split('.')[0]))

                a = a.replace(hour=int(date.split()[1].split(":")[0]), minute=int(date.split()[1].split(":")[1]))

                set_date(db_conn, db_cur, event.object.message['from_id'], a.strftime('%d/%m/%Y %H:%M'))

            else:
                a = analyze_string(message)
                if a[0] == '–û—à–∏–±–∫–∞':
                    vk.messages.send(peer_id=event.object.message["peer_id"],
                                     message=f"&#10060; {a[0]} \n\n"
                                             f"{a[1]}",
                                     random_id=get_random_id())

                elif a[2]['date'] is False and a[2]['time'] is False:
                    title = ' '.join(a[1]).capitalize()
                    keyboard = VkKeyboard(one_time=False, inline=True)
                    keyboard.add_callback_button(
                        label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        color=VkKeyboardColor.POSITIVE,
                        payload={"type": "confirm", "title": f"{title}",
                                 "time": f"{a[0].strftime('%d.%m.%Y –≤ %H:%M')}"},
                    )
                    vk.messages.send(peer_id=event.object.message["peer_id"],
                                     message=f"&#9989; –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! \n\n"
                                             f"-> {title} \n"
                                             f"-> –î–∞—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. \n\n"
                                             f"–ï—Å–ª–∏ –≤—Å—ë —Ç–∞–∫, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\"",
                                     random_id=get_random_id(),
                                     keyboard=keyboard.get_keyboard())
                else:
                    title = ' '.join(a[1]).capitalize()
                    keyboard = VkKeyboard(one_time=False, inline=True)
                    keyboard.add_callback_button(
                        label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        color=VkKeyboardColor.POSITIVE,
                        payload={"type": "confirm", "title": f"{title}",
                                 "time": f"{a[0].strftime('%d.%m.%Y –≤ %H:%M')}"},
                    )

                    vk.messages.send(peer_id=event.object.message["peer_id"],
                                     message=f"&#10068; –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ. \n\n"
                                             f"-> {title} \n"
                                             f"-> –î–∞—Ç–∞: {a[0].strftime('%d.%m.%Y –≤ %H:%M')}. \n\n"
                                             f"–ï—Å–ª–∏ –≤—Å—ë —Ç–∞–∫, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\"",
                                     random_id=get_random_id(),
                                     keyboard=keyboard.get_keyboard())

    elif event.type == VkBotEventType.MESSAGE_EVENT:

        print(event.object)

        if event.object.payload.get("type") == "confirm":
            handler.confirm_info(event)
